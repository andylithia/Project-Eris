-- Type 00: Misc
										ARC	CTC		A	B	C	ST	M
0000 0000 00ï¼šno Operations					

nnnn 1001 00: 0 -> sn						Y
nnnn 0001 00: 1 -> sn						Y
nnnn 0101 00: if sn = 0						Y
0000 1101 00: clear status					Y

nnnn 0011 00: n -> p						Y
nnnn 1011 00: if p # n						Y
0000 0111 00: p - 1 -> p					Y
0000 1111 00: p + 1 -> p					Y

nnn0 0100 00: select rom n					Y
0011 0100 00: keys -> rom address			Y
0000 1100 00: return						Y

nnnn0 110 00: load constant n			Y	Y
00001 010 00: display toggle			Y
00101 010 00: c exchange m				Y					Cio		Mio
01001 010 00: c -> stack				Y					Co	STi
01101 010 00: stack -> a				Y			Ai			STo
10001 010 00: display off				Y
10101 010 00: m -> c					Y					Ci		Mo
11001 010 00: down rotate				Y					Cio	STio
11101 010 00: clear registers			Y			Ai	Bi	Ci	STi	Mi

-- Type 01:
aaaaaaaa 01: jsb a

-- Type 11:
aaaaaaaa 11: go to a, if no carry go to a, then go to a

-- Type 10: Arithmetic Operations

field select
fff:000:p	pointer			[p]   [3:0]
	001:m	mantissa		[12:3][3:0]
	010:x	exponent		[2:0] [3:0]
	011:w	word			[13:0][3:0]
	100:wp	word pointer	[p:0] [3:0]
	101:ms	mantissa & sign	[13:3][3:0]
	110:xs	exponent sign	[2]   [3:0]
	111:s	sign			[13]  [3:0]

OPCD  FS  TYP Mnemonics*1		Mnemonics*2
..... fff 1.: if b[f] = 0		?B=0
....1 fff 1.: 0 -> b[f]			B=0
...1. fff 1.: if a >= c[f]		?A>=C
...11 fff 1.: if c[f] >= 1		?C>=1
..1.. fff 1.: b -> c[f]			C=B
..1.1 fff 1.: 0 - c -> c[f]		C=-C
..11. fff 1.: 0 -> c[f]			C=0
..111 fff 1.: 0 - c - 1 -> c[f]	C=-C-1

.1... fff 1.: shift left a[f]	A SL
.1..1 fff 1.: a -> b[f]			B=A
.1.1. fff 1.: a - c -> c[f]		C=A-C
.1.11 fff 1.: c - 1 -> c[f]		C=C-1
.11.. fff 1.: c -> a[f]			A=C
.11.1 fff 1.: if c[f] = 0		?C=0
.111. fff 1.: a + c -> c[f]		C=A+C
.1111 fff 1.: c + 1 -> c[f]		C=C+1

1.... fff 1.: if a >= b[f]		?A>=B
1...1 fff 1.: b exchange c[f]	BC EX
1..1. fff 1.: shift right c[f]	C SR
1..11 fff 1.: if a[f] >= 1		?A>=1
1.1.. fff 1.: shift right b[f]	B SR
1.1.1 fff 1.: c + c -> c[f]		C=C+C
1.11. fff 1.: shift right a[f]	A SR
1.111 fff 1.: 0 -> a[f]			A=0

11... fff 1.: a - b -> a[f]		A=A-B 
11..1 fff 1.: a exchange b[f]	AB EX
11.1. fff 1.: a - c -> a[f]		A=A-C
11.11 fff 1.: a - 1 -> a[f]		A=A-1
111.. fff 1.: a + b -> a[f]		A=A+B
111.1 fff 1.: a exchange c[f]	AC EX
1111. fff 1.: a + c -> a[f]		A=A+C
11111 fff 1.: a + 1 -> a[f]		A=A+1

1*.CCE33 / HP48 Patent Document
2*.HP41 CPU Detailed Description Document

-NO ALU: out=0, cry=0
-cry_z:	the digit begins with no carry, = cry_r && !incry_r
-cry_o:	the digit begins with carry,	= cry_r ||  incry_r
-cry_r:		carry register
-incry_r:	carry init register
	cry_r	inicry_r	cry_o	cry_z
	.		.			.		1
	1		.			1		.
	x		1			1		.

PH2		>_/55\__/00\__/01\__/02\__/##\__/##\__/##\__/54\__/55\__/00\_>
te_cry F>_____________/^^^^^^^^^^^^^^^^^^^^^^^\______________________>
inicry_r>_______/^^^^^^^^^^^\___________________________________/^^^^> set by te_55
cry_r  F>___________________------???------__________________________>
cry_o	>_____________/^^^^^------???------__________________________>
cry_z	>^^^^^^^^^^^^^\_____------???------^^^^^^^^^^^^^^^^^^^^^^^^^^>




// EXTRA(HP45)
0001 0000 00: buffer -> rom address
0010 0000 00: memory insert
0100 0000 00: mark and search
0110 0000 00: memory delete
1000 0000 00: rom address -> buffer
1010 0000 00: search for label
1100 0000 00: pointer advance

10011 101 00: c -> data address			Y
10111 101 00: c -> data					Y
10111 110 00: data -> c					Y
nnn1 1101 00: delayed select rom n			Y